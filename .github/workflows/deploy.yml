name: Build and Deploy Backstage to AKS

on:
  push:
    branches:
      - none
  workflow_dispatch:

env:
  ACR_NAME: mybsacr.azurecr.io
  IMAGE_NAME: backstage-demo
  IMAGE_TAG: latest
  RESOURCE_GROUP: bsrgp
  AKS_CLUSTER_NAME: myBSCluster
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}
  JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
  JIRA_EMAIL_SUFFIX: ${{ secrets.JIRA_EMAIL_SUFFIX }}
  K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
  K8S_CA_DATA: ${{ secrets.K8S_CA_DATA }}


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install dependencies and build
      run: |
        corepack enable
        yarn install --immutable
        yarn tsc
        yarn build:backend

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Docker Login to ACR
      run: az acr login --name mybsacr

    - name: Build and Push Docker Image
      run: |
        docker build -f packages/backend/Dockerfile -t $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG .
        docker push $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG

    - name: Get AKS credentials
      run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Deploy PostgreSQL to AKS
      run: |
        kubectl apply -f k8s/postgres-deployment.yaml

    - name: Deploy Backstage to AKS
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    - name: Verify Deployment
      run: kubectl get pods
