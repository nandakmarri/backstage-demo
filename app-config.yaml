app:
  title: MyCompany Backstage Portal
  baseUrl: https://backstage.mycompany.com

organization:
  name: My Company

backend:
  baseUrl: https://backstage.mycompany.com
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'https:']
  cors:
    origin: https://backstage.mycompany.com
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
  jiraDashboard:
    token: ${JIRA_TOKEN}
    baseUrl: https://nandamarri.atlassian.net/
    headers: {}
    userEmailSuffix: ${JIRA_EMAIL_SUFFIX}
    annotationPrefix: jira

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  azure:
    - host: dev.azure.com
      token: ${AZURE_DEVOPS_TOKEN}

proxy:
  # Add reverse proxy endpoints here as needed
  # Example:
  # '/example':
  #   target: 'https://example.com'
  #   changeOrigin: true

techdocs:
  builder: 'local' # Use 'external' if using a separate builder service
  generator:
    runIn: 'docker' # Ensure Docker is available in production
  publisher:
    type: 'local' # Use 'awsS3' or 'googleGcs' for scalable production deployments

auth:
  providers:
    guest: {}

scaffolder:
  # Optional: Additional configuration for templates, Git integrations, etc.

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../examples/entities.yaml
    - type: file
      target: ../../jira/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
  useUrlReadersSearch: true

kubernetes:
  # Example config for AKS (update values per your cluster):
  serviceLocatorMethod:
    type: multiTenant
  clusterLocatorMethods:
    - type: config
      clusters:
        - url: https://<AKS-API-SERVER>
          name: aks-cluster
          authProvider: serviceAccount
          serviceAccountToken: ${K8S_TOKEN}
          caData: ${K8S_CA_DATA}

permission:
  enabled: true
